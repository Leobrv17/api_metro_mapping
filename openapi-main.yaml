openapi: 3.0.0
servers:
  - url: 'http://localhost:3000'
info:
  title: "Transit API"
  description: "API documentation for managing transit lines and stations."
  version: "1.0.0"

paths:
  /lines:
    get:
      tags:
        - Lines
      operationId: getLines
      summary: "List all lines"
      description: "Retrieve a list of all transit lines with optional sorting by specified fields."
      parameters:
        - name: "sortBy"
          in: "query"
          description: "Field to sort by (e.g., 'name' or 'couleur')"
          schema:
            type: "string"
        - name: "sortDirection"
          in: "query"
          description: "Sorting direction: ascending (asc) or descending (desc)"
          schema:
            type: "string"
            enum: [ "asc", "desc" ]
      responses:
        '200':
          description: "A list of all lines."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Line A"
                        couleur:
                          type: string
                          example: "#FF5733"
                        open:
                          type: boolean
                          example: true
    post:
      tags:
        - Lines
      operationId: createLine
      summary: "Create a new line"
      description: "Create a new transit line with specified name, color, and open status."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ name, couleur, open ]
              properties:
                name:
                  type: string
                  description: "The name of the line"
                  example: "Line A"
                couleur:
                  type: string
                  description: "The color of the line in hex format"
                  example: "#FF5733"
                open:
                  type: boolean
                  description: "Whether the line is open (true) or closed (false)"
                  example: true
      responses:
        '200':
          description: "Line created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Line A"

  /lines/{id}:
    get:
      tags:
        - Lines
      operationId: getLineById
      summary: "Retrieve a line by ID"
      description: "Get details of a single line by its ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the line to retrieve"
          schema:
            type: integer
      responses:
        '200':
          description: "Line details retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Line A"
                      couleur:
                        type: string
                        example: "#FF5733"
                      open:
                        type: boolean
                        example: true
        '404':
          description: "Line not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Line not found."

    delete:
      tags:
        - Lines
      operationId: deleteLineById
      summary: "Delete a line by ID"
      description: "Delete a line by its ID and return a success status."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the line to delete"
          schema:
            type: integer
      responses:
        '200':
          description: "Line deleted successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Line deleted successfully."
        '404':
          description: "Line not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Line not found."
  /lines/station:
    post:
      tags:
        - Lines
      summary: "Add a station to a ligne"
      description: "Associate an existing station with an existing ligne."
      operationId: addStationToLigne
      requestBody:
        required: true
        description: "IDs of the ligne and the station to be associated."
        content:
          application/json:
            schema:
              type: object
              required:
                - ligneId
                - stationId
              properties:
                ligneId:
                  type: string
                  description: "The ID of the ligne."
                  example: "12345"
                stationId:
                  type: string
                  description: "The ID of the station."
                  example: "67890"
      responses:
        '200':
          description: "Station successfully added to the ligne."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Station successfully added to the ligne."
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "The ID of the ligne."
                        example: "12345"
                      name:
                        type: string
                        description: "The name of the ligne."
                        example: "Ligne Rouge"
                      couleur:
                        type: string
                        description: "The color of the ligne."
                        example: "Rouge"
                      open:
                        type: boolean
                        description: "Indicates whether the ligne is active."
                        example: true
                      stations:
                        type: array
                        description: "The stations associated with the ligne."
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              description: "The ID of the station."
                              example: "67890"
                            name:
                              type: string
                              description: "The name of the station."
                              example: "StationA"
                            x:
                              type: integer
                              description: "The x-coordinate of the station."
                              example: 100
                            y:
                              type: integer
                              description: "The y-coordinate of the station."
                              example: 200
        '400':
          description: "Invalid input data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Both ligneId and stationId are required."
        '500':
          description: "Server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred while adding the station to the ligne."
  /stations:
    get:
      tags:
        - Stations
      operationId: getStations
      summary: "List all stations"
      description: "Retrieve a list of all stations with optional sorting."
      parameters:
        - name: "sortBy"
          in: "query"
          description: "Field to sort by (e.g., 'name', 'x', or 'y')"
          schema:
            type: "string"
        - name: "sortDirection"
          in: "query"
          description: "Sorting direction: ascending (asc) or descending (desc)"
          schema:
            type: "string"
            enum: [ "asc", "desc" ]
      responses:
        '200':
          description: "A list of all stations."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Station A"
                        x:
                          type: number
                          description: "The x-coordinate of the station"
                          example: 100
                        y:
                          type: number
                          description: "The y-coordinate of the station"
                          example: 200
    post:
      tags:
        - Stations
      operationId: createStation
      summary: "Create a new station"
      description: "Create a new station with specified name and coordinates (x, y)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ name, x, y ]
              properties:
                name:
                  type: string
                  description: "The name of the station"
                  example: "Station A"
                x:
                  type: number
                  description: "The x-coordinate of the station"
                  example: 100
                y:
                  type: number
                  description: "The y-coordinate of the station"
                  example: 200
      responses:
        '200':
          description: "Station created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Station A"

  /stations/{id}:
    get:
      tags:
        - Stations
      operationId: getStationById
      summary: "Retrieve a station by ID"
      description: "Get details of a single station by its ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the station to retrieve"
          schema:
            type: integer
      responses:
        '200':
          description: "Station details retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Station A"
                      x:
                        type: number
                        example: 100
                      y:
                        type: number
                        example: 200
        '404':
          description: "Station not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Station not found."

    delete:
      tags:
        - Stations
      operationId: deleteStationById
      summary: "Delete a station by ID"
      description: "Delete a station by its ID and return a success status."
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the station to delete"
          schema:
            type: integer
      responses:
        '200':
          description: "Station deleted successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Station deleted successfully."
        '404':
          description: "Station not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Station not found."
  /stations/name/{name}/coordinates:
    put:
      tags:
        - Stations
      summary: "Update station coordinates by name"
      description: "Update the x and y coordinates of a station identified by its name."
      operationId: updateStationCoordinatesByName
      parameters:
        - name: name
          in: path
          required: true
          description: "The name of the station to update."
          schema:
            type: string
      requestBody:
        description: "New coordinates for the station."
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - x
                - y
              properties:
                x:
                  type: number
                  description: "The new x-coordinate of the station."
                  example: 150
                y:
                  type: number
                  description: "The new y-coordinate of the station."
                  example: 300
      responses:
        '200':
          description: "Station updated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "StationA"
                      x:
                        type: number
                        example: 150
                      y:
                        type: number
                        example: 300
        '400':
          description: "Invalid input (e.g., missing or incorrect coordinates)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid coordinates. Both x and y must be numbers."
        '404':
          description: "Station not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Station not found."
  /connections:
    get:
      tags:
        - Connections
      operationId: getConnections
      summary: "List all connections"
      description: "Retrieve all connections with optional sorting by specified fields."
      parameters:
        - name: "sortBy"
          in: "query"
          description: "Field to sort by (e.g., 'fromStation' or 'toStation')"
          required: false
          schema:
            type: "string"
        - name: "sortDirection"
          in: "query"
          description: "Direction of sorting, either ascending (asc) or descending (desc)"
          required: false
          schema:
            type: "string"
            enum: [ "asc", "desc" ]
      responses:
        '200':
          description: "A list of connections"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: "Unique identifier for the connection"
                        fromStation:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                          description: "Information about the starting station"
                        toStation:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                          description: "Information about the destination station"
    post:
      tags:
        - Connections
      operationId: createConnection
      summary: "Create a new connection"
      description: "Create a new connection between two stations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ fromStationId, toStationId ]
              properties:
                fromStationId:
                  type: string
                  description: "ID of the starting station"
                toStationId:
                  type: string
                  description: "ID of the destination station"
      responses:
        '201':
          description: "Connection created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      fromStationId:
                        type: string
                      toStationId:
                        type: string

  /connections/{id}:
    get:
      tags:
        - Connections
      operationId: getConnectionById
      summary: "Retrieve a connection by ID"
      description: "Get a single connection by its unique ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Connection found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      fromStation:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                      toStation:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
        '404':
          description: "Connection not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

    delete:
      tags:
        - Connections
      operationId: deleteConnectionById
      summary: "Delete a connection by ID"
      description: "Delete a connection by its unique ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Connection deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: "Connection not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users, optionally sorted by a specified field and direction.
      operationId: getUsers
      responses:
        '200':
          description: List of users retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        idt:
                          type: string
                          example: "user123"
                        password:
                          type: string
                          example: "password123"
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided identifier and password.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idt
                - password
              properties:
                idt:
                  type: string
                  description: Identifier of the user.
                  example: "user123"
                password:
                  type: string
                  description: Password of the user.
                  example: "password123"
      responses:
        '200':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      idt:
                        type: string
                        example: "user123"
                      password:
                        type: string
                        example: "password123"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve details of a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      idt:
                        type: string
                        example: "user123"
                      password:
                        type: string
                        example: "password123"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found."
    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Delete a user identified by their ID.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully."
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found."
  /users/login:
    post:
      tags:
        - Users
      operationId: loginUser
      summary: "Login a user"
      description: "Authenticates the user with username and password and returns a JWT token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idt
                - password
              properties:
                username:
                  type: string
                  description: "The username of the user."
                  example: "john_doe"
                password:
                  type: string
                  description: "The password of the user."
                  example: "securepassword123"
      responses:
        '200':
          description: "Login successful and JWT token returned."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    description: "JWT token for the authenticated user."
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MX0.xJd5NbHJ9n9ZT3sLjVxkK9_D92YgrOX6jXnftI5fNRs"
        '400':
          description: "Invalid username or password"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid username or password"
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        idt:
          type: string
          example: "user123"
        password:
          type: string
          example: "password123"